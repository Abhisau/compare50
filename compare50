#!/usr/bin/env python3

import os
import requests
import sys

from argparse import ArgumentParser
from backports.shutil_get_terminal_size import get_terminal_size
from pkg_resources import DistributionNotFound, get_distribution
from signal import SIGINT, signal


# Require Python 3.6+
if sys.version_info < (3, 6):
    sys.exit("You have an old version of python. Install version 2.7 or higher.")

# Get version
try:
    d = get_distribution("compare50")
except DistributionNotFound:
    __version__ = "UNKNOWN"
else:
    __version__ = d.version


def main():

    # Exit on ctrl-c
    def handler(signum, frame):
        cprint("")
        cancel()

    # Register handler
    signal(SIGINT, handler)

    # Parse command-line arguments
    parser = ArgumentParser(description="A command-line tool that compares files for similarties.")
    parser.add_argument("-a", "--archive", action="append", help="path to archived files to be compared", metavar="PATH")
    parser.add_argument("-d", "--distro", action="append", help="path to distro to be factored out", metavar="PATH")
    parser.add_argument("-V", "--version", action="version",
                        version="%(prog)s {}".format(__version__))
    parser.add_argument("submissions", help="submissions to be compared", metavar="PATH", nargs="+")
    args = parser.parse_args(sys.argv[1:])

    app_url = os.environ.get("APP_URL") or "https://compare.cs50.io/"

    files = []
    for path in args.submissions:
        for file in walk(path):
            files.append(("submissions", (file, open(file, "rb"), None, {"X-Foo": "bar"})))

    response = requests.post(app_url, allow_redirects=False, files=files)
    if response.status_code == 302:
        print(response.headers["location"])
        sys.exit(0)
    else:
        print(response.status_code)
        print(response.text)
        sys.exit(1)

def cancel():
    """Report cancellation."""
    cprint("Cancelled.", "red")  # TODO: decide on wording
    sys.exit(1)


def cprint(text="", color=None, on_color=None, attrs=None, end="\n"):
    """Colorize text (and wraps to terminal's width)."""

    # Assume 80 in case not running in a terminal
    columns, _ = get_terminal_size()
    if columns == 0:
        columns = 80

    # Print text, flushing output
    termcolor.cprint(fill(text, columns, drop_whitespace=False, replace_whitespace=False),
                     color=color, on_color=on_color, attrs=attrs, end=end)
    sys.stdout.flush()


def excepthook(type, value, tb):
    """Report an exception."""
    excepthook.ignore = False
    if type is RuntimeError and str(value):
        cprint(str(value), "yellow")
    else:
        cprint("Sorry, something's wrong! Let sysadmins@cs50.harvard.edu know!", "yellow")
        print_exception(type, value, tb)
    cancel()


sys.excepthook = excepthook


def walk(path):
    """Walks directory recursively, returning sorted list of paths of files therein."""
    if os.path.isfile(path):
        return [os.path.normpath(path)]
    files = []
    for (dirpath, dirnames, filenames) in os.walk(directory):
        for filename in filenames:
            files.append(os.path.normpath(os.path.join(dirpath, filename)))
    return files


if __name__ == "__main__":
    main()
